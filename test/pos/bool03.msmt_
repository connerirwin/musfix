; Sorts
(declare-sort List 1)
(declare-sort Char 0)

; Constants
(declare-const lit#cat (List Char))
(declare-const lit$36$not$45$the$45$hippopotamus (List Char))
(declare-const lit#dog (List Char))



; Uninterpreted Functions


; Qualifiers
(qualif LE ((v @a0)(x @a0)) (<= x v))

; Well-formedness Constraints
(wf $k1 ((lq_karg$bx##k1 Bool)(lq_karg$v##k1 Bool)))

;  Constraints
(constraint (forall ((_VV##1 Bool)(bx Bool)) (=> (<= (cast_as_int bx) (cast_as_int _VV##1)) ($k1 bx _VV##1))))
(constraint (forall ((_VV##2 Bool)(bx Bool)) (=> (and (not (= lit#cat lit#dog)) ($k1 bx _VV##2)) (<= (cast_as_int bx) (cast_as_int _VV##2)))))

