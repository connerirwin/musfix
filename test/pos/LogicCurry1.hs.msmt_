; Uninterpreted Sorts
(declare-sort List 1)


; Constants
(declare-const GHC.Types.False##68 Bool)
(declare-const GHC.Types.True##6u Bool)
(declare-const GHC.Types.LT##6S GHC.Types.Ordering)
(declare-const GHC.Types.GT##6W GHC.Types.Ordering)
(declare-const GHC.Err.undefined##02v @a0)
(declare-const GHC.Types.EQ##6U GHC.Types.Ordering)


; Distinct Constants
(assert (distinct GHC.Types.False##68 GHC.Types.True##6u))
(assert (distinct GHC.Types.LT##6S GHC.Types.GT##6W GHC.Types.EQ##6U))


; Uninterpreted Functions
(declare-fun runFun ((Arrow @a0 @a1) @a0) @a1)
(declare-fun addrLen (Str) Int)
(declare-fun papp5 ((Pred @a0 @a1 @a2 @a3 @a4) @a5 @a6 @a7 @a8 @a9) Bool)
(declare-fun x_Tuple21 ((Tuple @a0 @a1)) @a0)
(declare-fun x_Tuple65 ((Tuple @a0 @a1 @a2 @a3 @a4 @a5)) @a4)
(declare-fun x_Tuple55 ((Tuple @a0 @a1 @a2 @a3 @a4)) @a4)
(declare-fun x_Tuple33 ((Tuple @a0 @a1 @a2)) @a2)
(declare-fun x_Tuple77 ((Tuple @a0 @a1 @a2 @a3 @a4 @a5 @a6)) @a6)
(declare-fun papp3 ((Pred @a0 @a1 @a2) @a3 @a4 @a5) Bool)
(declare-fun x_Tuple63 ((Tuple @a0 @a1 @a2 @a3 @a4 @a5)) @a2)
(declare-fun x_Tuple41 ((Tuple @a0 @a1 @a2 @a3)) @a0)
(declare-fun papp4 ((Pred @a0 @a1 @a2 @a3) @a4 @a5 @a6 @a7) Bool)
(declare-fun x_Tuple64 ((Tuple @a0 @a1 @a2 @a3 @a4 @a5)) @a3)
(declare-fun autolen (@a0) Int)
(declare-fun x_Tuple52 ((Tuple @a0 @a1 @a2 @a3 @a4)) @a1)
(declare-fun head ((List @a0)) @a0)
(declare-fun null ((List @a0)) Bool)
(declare-fun papp2 ((Pred @a0 @a1) @a2 @a3) Bool)
(declare-fun x_Tuple62 ((Tuple @a0 @a1 @a2 @a3 @a4 @a5)) @a1)
(declare-fun fromJust ((GHC.Base.Maybe @a0)) @a0)
(declare-fun papp7 ((Pred @a0 @a1 @a2 @a3 @a4 @a5 @a6) @a7 @a8 @a9 @a10 @a11 @a12 @a13) Bool)
(declare-fun x_Tuple53 ((Tuple @a0 @a1 @a2 @a3 @a4)) @a2)
(declare-fun x_Tuple71 ((Tuple @a0 @a1 @a2 @a3 @a4 @a5 @a6)) @a0)
(declare-fun ack (Int Int) Int)
(declare-fun x_Tuple74 ((Tuple @a0 @a1 @a2 @a3 @a4 @a5 @a6)) @a3)
(declare-fun len ((@a0 @a1)) Int)
(declare-fun papp6 ((Pred @a0 @a1 @a2 @a3 @a4 @a5) @a6 @a7 @a8 @a9 @a10 @a11) Bool)
(declare-fun x_Tuple22 ((Tuple @a0 @a1)) @a1)
(declare-fun x_Tuple66 ((Tuple @a0 @a1 @a2 @a3 @a4 @a5)) @a5)
(declare-fun x_Tuple44 ((Tuple @a0 @a1 @a2 @a3)) @a3)
(declare-fun strLen ((List Char)) Int)
(declare-fun x_Tuple72 ((Tuple @a0 @a1 @a2 @a3 @a4 @a5 @a6)) @a1)
(declare-fun isJust ((GHC.Base.Maybe @a0)) Bool)
(declare-fun x_Tuple31 ((Tuple @a0 @a1 @a2)) @a0)
(declare-fun x_Tuple75 ((Tuple @a0 @a1 @a2 @a3 @a4 @a5 @a6)) @a4)
(declare-fun papp1 ((Pred @a0) @a1) Bool)
(declare-fun x_Tuple61 ((Tuple @a0 @a1 @a2 @a3 @a4 @a5)) @a0)
(declare-fun x_Tuple43 ((Tuple @a0 @a1 @a2 @a3)) @a2)
(declare-fun tail ((List @a0)) (List @a0))
(declare-fun x_Tuple51 ((Tuple @a0 @a1 @a2 @a3 @a4)) @a0)
(declare-fun x_Tuple73 ((Tuple @a0 @a1 @a2 @a3 @a4 @a5 @a6)) @a2)
(declare-fun Main.ack##rjG (Int Int) Int)
(declare-fun x_Tuple54 ((Tuple @a0 @a1 @a2 @a3 @a4)) @a3)
(declare-fun cmp (GHC.Types.Ordering) GHC.Types.Ordering)
(declare-fun x_Tuple32 ((Tuple @a0 @a1 @a2)) @a1)
(declare-fun x_Tuple76 ((Tuple @a0 @a1 @a2 @a3 @a4 @a5 @a6)) @a5)
(declare-fun snd ((Tuple @a0 @a1)) @a1)
(declare-fun fst ((Tuple @a0 @a1)) @a0)
(declare-fun x_Tuple42 ((Tuple @a0 @a1 @a2 @a3)) @a1)


; Qualifiers
(qualif Fst ((v @a1)(y @a0)) (= v (fst y)))
(qualif Snd ((v @a1)(y @a0)) (= v (snd y)))
(qualif Auto ((v##1 Int)(n Int)(x Int)) (= v##1 (ack n x)))
(qualif IsEmp ((v GHC.Types.Bool)(xs (List @a0))) (= v (> (len xs) 0)))
(qualif IsEmp ((v GHC.Types.Bool)(xs (List @a0))) (= v (= (len xs) 0)))
(qualif ListZ ((v (List @a0))) (= (len v) 0))
(qualif ListZ ((v (List @a0))) (>= (len v) 0))
(qualif ListZ ((v (List @a0))) (> (len v) 0))
(qualif CmpLen ((v (List @a1))(xs (List @a0))) (= (len v) (len xs)))
(qualif CmpLen ((v (List @a1))(xs (List @a0))) (>= (len v) (len xs)))
(qualif CmpLen ((v (List @a1))(xs (List @a0))) (> (len v) (len xs)))
(qualif CmpLen ((v (List @a1))(xs (List @a0))) (<= (len v) (len xs)))
(qualif CmpLen ((v (List @a1))(xs (List @a0))) (< (len v) (len xs)))
(qualif EqLen ((v Int)(xs (List @a0))) (= v (len xs)))
(qualif LenEq ((v (List @a0))(x Int)) (= x (len v)))
(qualif LenDiff ((v (List @a0))(x Int)) (= (len v) (+ x 1)))
(qualif LenDiff ((v (List @a0))(x Int)) (= (len v) (- x 1)))
(qualif LenAcc ((v Int)(xs (List @a0))(n Int)) (= v (+ (len xs) n)))
(qualif Bot ((v @a0)) (= 0 1))
(qualif Bot ((v @a0)) (= 0 1))
(qualif Bot ((v @a0)) (= 0 1))
(qualif Bot ((v Bool)) (= 0 1))
(qualif Bot ((v Int)) (= 0 1))
(qualif CmpZ ((v @a0)) (< v 0))
(qualif CmpZ ((v @a0)) (<= v 0))
(qualif CmpZ ((v @a0)) (> v 0))
(qualif CmpZ ((v @a0)) (>= v 0))
(qualif CmpZ ((v @a0)) (= v 0))
(qualif CmpZ ((v @a0)) (not (= v 0)))
(qualif Cmp ((v @a0)(x @a0)) (< v x))
(qualif Cmp ((v @a0)(x @a0)) (<= v x))
(qualif Cmp ((v @a0)(x @a0)) (> v x))
(qualif Cmp ((v @a0)(x @a0)) (>= v x))
(qualif Cmp ((v @a0)(x @a0)) (= v x))
(qualif Cmp ((v @a0)(x @a0)) (not (= v x)))
(qualif One ((v Int)) (= v 1))
(qualif True1 ((v GHC.Types.Bool)) v)
(qualif False1 ((v GHC.Types.Bool)) (not v))
(qualif Papp ((v @a0)(p (Pred @a0))) (papp1 p v))
(qualif Papp2 ((v @a1)(x @a0)(p (Pred @a1 @a0))) (papp2 p v x))
(qualif Papp3 ((v @a2)(x @a0)(y @a1)(p (Pred @a2 @a0 @a1))) (papp3 p v x y))


; Well-formedness Constraints


; Horn Constraints
(constraint (forall ((GHC.Err.undefined##02v @a0)(GHC.Types.True##6u Bool)(GHC.Types.False##68 Bool)(GHC.Types.EQ##6U GHC.Types.Ordering)(GHC.Types.LT##6S GHC.Types.Ordering)(GHC.Types.GT##6W GHC.Types.Ordering)(Main.ack##rjG (Int Int) Int)(Main.ack##rjG (Int Int) Int)(m##alH Int)(v1 (Int) Int)) (=> (and True (and (= v9 GHC.Types.True##6u) (and (= v10 GHC.Types.False##68) (and (= v11 GHC.Types.EQ##6U) (and (= v12 GHC.Types.LT##6S) (and (= v13 GHC.Types.GT##6W) (and True (and True (and True (= v1 (apply ack m##alH))))))))))) (= v1 (apply ack m##alH)))))
