; Sorts
(declare-sort List 1)
(declare-sort Tuple4 4)
(declare-sort Tuple7 7)
(declare-sort Tuple3 3)
(declare-sort Tuple5 5)
(declare-sort Tuple6 6)
(declare-sort Tuple2 2)
(declare-sort GHC.Base.Maybe 1)
(declare-sort Pred1 1)
(declare-sort Pred6 6)
(declare-sort Pred7 7)
(declare-sort Pred2 2)
(declare-sort Pred4 4)
(declare-sort Pred3 3)
(declare-sort Pred5 5)
(declare-sort Arrow 2)
(declare-sort Char 0)
(declare-sort GHC.Types.Ordering 0)

; Constants
(declare-const _GHC.Types.False##68 Bool)
(declare-const _GHC.Types.True##6u Bool)
(declare-const _GHC.Types.LT##6S GHC.Types.Ordering)
(declare-const _GHC.Types.GT##6W GHC.Types.Ordering)
(declare-const _GHC.Err.undefined##02v @a0)
(declare-const _GHC.Types.EQ##6U GHC.Types.Ordering)

(assert (distinct _GHC.Types.False##68 _GHC.Types.True##6u))
(assert (distinct _GHC.Types.LT##6S _GHC.Types.GT##6W _GHC.Types.EQ##6U))

; Uninterpreted Functions
(declare-fun runFun ((Arrow @a0 @a1) @a0) @a1)
(declare-fun addrLen ((List Char)) Int)
(declare-fun papp5 ((Pred5 @a0 @a1 @a2 @a3 @a4) @a5 @a6 @a7 @a8 @a9) Bool)
(declare-fun x_Tuple21 ((Tuple2 @a0 @a1)) @a0)
(declare-fun x_Tuple65 ((Tuple6 @a0 @a1 @a2 @a3 @a4 @a5)) @a4)
(declare-fun x_Tuple55 ((Tuple5 @a0 @a1 @a2 @a3 @a4)) @a4)
(declare-fun x_Tuple33 ((Tuple3 @a0 @a1 @a2)) @a2)
(declare-fun x_Tuple77 ((Tuple7 @a0 @a1 @a2 @a3 @a4 @a5 @a6)) @a6)
(declare-fun papp3 ((Pred3 @a0 @a1 @a2) @a3 @a4 @a5) Bool)
(declare-fun x_Tuple63 ((Tuple6 @a0 @a1 @a2 @a3 @a4 @a5)) @a2)
(declare-fun x_Tuple41 ((Tuple4 @a0 @a1 @a2 @a3)) @a0)
(declare-fun papp4 ((Pred4 @a0 @a1 @a2 @a3) @a4 @a5 @a6 @a7) Bool)
(declare-fun x_Tuple64 ((Tuple6 @a0 @a1 @a2 @a3 @a4 @a5)) @a3)
(declare-fun autolen (@a0) Int)
(declare-fun x_Tuple52 ((Tuple5 @a0 @a1 @a2 @a3 @a4)) @a1)
(declare-fun head ((List @a0)) @a0)
(declare-fun null ((List @a0)) Bool)
(declare-fun papp2 ((Pred2 @a0 @a1) @a2 @a3) Bool)
(declare-fun x_Tuple62 ((Tuple6 @a0 @a1 @a2 @a3 @a4 @a5)) @a1)
(declare-fun fromJust ((GHC.Base.Maybe @a0)) @a0)
(declare-fun papp7 ((Pred7 @a0 @a1 @a2 @a3 @a4 @a5 @a6) @a7 @a8 @a9 @a10 @a11 @a12 @a13) Bool)
(declare-fun x_Tuple53 ((Tuple5 @a0 @a1 @a2 @a3 @a4)) @a2)
(declare-fun x_Tuple71 ((Tuple7 @a0 @a1 @a2 @a3 @a4 @a5 @a6)) @a0)
(declare-fun ack (Int Int) Int)
(declare-fun x_Tuple74 ((Tuple7 @a0 @a1 @a2 @a3 @a4 @a5 @a6)) @a3)
(declare-fun len ((@t0 @a1)) Int)
(declare-fun papp6 ((Pred6 @a0 @a1 @a2 @a3 @a4 @a5) @a6 @a7 @a8 @a9 @a10 @a11) Bool)
(declare-fun x_Tuple22 ((Tuple2 @a0 @a1)) @a1)
(declare-fun x_Tuple66 ((Tuple6 @a0 @a1 @a2 @a3 @a4 @a5)) @a5)
(declare-fun x_Tuple44 ((Tuple4 @a0 @a1 @a2 @a3)) @a3)
(declare-fun strLen ((List Char)) Int)
(declare-fun x_Tuple72 ((Tuple7 @a0 @a1 @a2 @a3 @a4 @a5 @a6)) @a1)
(declare-fun isJust ((GHC.Base.Maybe @a0)) Bool)
(declare-fun x_Tuple31 ((Tuple3 @a0 @a1 @a2)) @a0)
(declare-fun x_Tuple75 ((Tuple7 @a0 @a1 @a2 @a3 @a4 @a5 @a6)) @a4)
(declare-fun papp1 ((Pred1 @a0) @a1) Bool)
(declare-fun x_Tuple61 ((Tuple6 @a0 @a1 @a2 @a3 @a4 @a5)) @a0)
(declare-fun x_Tuple43 ((Tuple4 @a0 @a1 @a2 @a3)) @a2)
(declare-fun tail ((List @a0)) (List @a0))
(declare-fun x_Tuple51 ((Tuple5 @a0 @a1 @a2 @a3 @a4)) @a0)
(declare-fun x_Tuple73 ((Tuple7 @a0 @a1 @a2 @a3 @a4 @a5 @a6)) @a2)
(declare-fun _Main.ack##rjG (Int Int) Int)
(declare-fun x_Tuple54 ((Tuple5 @a0 @a1 @a2 @a3 @a4)) @a3)
(declare-fun cmp (GHC.Types.Ordering) GHC.Types.Ordering)
(declare-fun x_Tuple32 ((Tuple3 @a0 @a1 @a2)) @a1)
(declare-fun x_Tuple76 ((Tuple7 @a0 @a1 @a2 @a3 @a4 @a5 @a6)) @a5)
(declare-fun snd ((Tuple2 @a0 @a1)) @a1)
(declare-fun fst ((Tuple2 @a0 @a1)) @a0)
(declare-fun x_Tuple42 ((Tuple4 @a0 @a1 @a2 @a3)) @a1)

; Qualifiers
(qualif Fst ((v @a1)(y @a0)) (= v (fst y)))
(qualif Snd ((v @a1)(y @a0)) (= v (snd y)))
(qualif Auto ((v##1 Int)(n Int)(x Int)) (= v##1 (ack n x)))
(qualif IsEmp ((v Bool)(xs (List @a0))) (= v (> (len xs) 0)))
(qualif IsEmp ((v Bool)(xs (List @a0))) (= v (= (len xs) 0)))
(qualif ListZ ((v (List @a0))) (= (len v) 0))
(qualif ListZ ((v (List @a0))) (>= (len v) 0))
(qualif ListZ ((v (List @a0))) (> (len v) 0))
(qualif CmpLen ((v (List @a1))(xs (List @a0))) (= (len v) (len xs)))
(qualif CmpLen ((v (List @a1))(xs (List @a0))) (>= (len v) (len xs)))
(qualif CmpLen ((v (List @a1))(xs (List @a0))) (> (len v) (len xs)))
(qualif CmpLen ((v (List @a1))(xs (List @a0))) (<= (len v) (len xs)))
(qualif CmpLen ((v (List @a1))(xs (List @a0))) (< (len v) (len xs)))
(qualif EqLen ((v Int)(xs (List @a0))) (= v (len xs)))
(qualif LenEq ((v (List @a0))(x Int)) (= x (len v)))
(qualif LenDiff ((v (List @a0))(x Int)) (= (len v) (+ x 1)))
(qualif LenDiff ((v (List @a0))(x Int)) (= (len v) (- x 1)))
(qualif LenAcc ((v Int)(xs (List @a0))(n Int)) (= v (+ (len xs) n)))
(qualif Bot ((v @a0)) (= 0 1))
(qualif Bot ((v @a0)) (= 0 1))
(qualif Bot ((v @a0)) (= 0 1))
(qualif Bot ((v Bool)) (= 0 1))
(qualif Bot ((v Int)) (= 0 1))
(qualif CmpZ ((v @a0)) (< v 0))
(qualif CmpZ ((v @a0)) (<= v 0))
(qualif CmpZ ((v @a0)) (> v 0))
(qualif CmpZ ((v @a0)) (>= v 0))
(qualif CmpZ ((v @a0)) (= v 0))
(qualif CmpZ ((v @a0)) (not (= v 0)))
(qualif Cmp ((v @a0)(x @a0)) (< v x))
(qualif Cmp ((v @a0)(x @a0)) (<= v x))
(qualif Cmp ((v @a0)(x @a0)) (> v x))
(qualif Cmp ((v @a0)(x @a0)) (>= v x))
(qualif Cmp ((v @a0)(x @a0)) (= v x))
(qualif Cmp ((v @a0)(x @a0)) (not (= v x)))
(qualif One ((v Int)) (= v 1))
(qualif True1 ((v Bool)) v)
(qualif False1 ((v Bool)) (not v))
(qualif Papp ((v @a0)(p (Pred1 @a0))) (papp1 p v))
(qualif Papp2 ((v @a1)(x @a0)(p (Pred2 @a1 @a0))) (papp2 p v x))
(qualif Papp3 ((v @a2)(x @a0)(y @a1)(p (Pred3 @a2 @a0 @a1))) (papp3 p v x y))

; Well-formedness Constraints


;  Constraints
(constraint (forall ((_VV##1 Int)(m##alH Int)(_VV##13 GHC.Types.Ordering)(_VV##12 GHC.Types.Ordering)(_VV##11 GHC.Types.Ordering)(_VV##10 Bool)(_VV##9 Bool)) (=> (and (= _VV##9 _GHC.Types.True##6u) (and (= _VV##10 _GHC.Types.False##68) (and (= _VV##11 _GHC.Types.EQ##6U) (and (= _VV##12 _GHC.Types.LT##6S) (and (= _VV##13 _GHC.Types.GT##6W) (= _VV##1 (ack m##alH))))))) (= _VV##1 (ack m##alH)))))

