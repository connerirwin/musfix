; Uninterpreted Sorts
(declare-sort List 1)


; Constants
(declare-const GHC.Types.False#68 GHC.Types.Bool)
(declare-const GHC.Types.True#6u GHC.Types.Bool)


; Distinct Constants


; Uninterpreted Functions
(declare-fun addrLen (Int) Int)
(declare-fun x_Tuple21 ((FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1)) @a0)
(declare-fun xsListSelector ((List @a0)) (List @a0))
(declare-fun x_Tuple65 ((FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3) @a4) @a5)) @a4)
(declare-fun x_Tuple55 ((FAppTy (FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3) @a4)) @a4)
(declare-fun x_Tuple33 ((FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2)) @a2)
(declare-fun x_Tuple77 ((FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3) @a4) @a5) @a6)) @a6)
(declare-fun papp3 ((Pred @a0 @a1 @a2) @a3 @a4 @a5) Bool)
(declare-fun x_Tuple63 ((FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3) @a4) @a5)) @a2)
(declare-fun x_Tuple41 ((FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3)) @a0)
(declare-fun papp4 ((Pred @a0 @a1 @a2 @a6) @a3 @a4 @a5 @a7) Bool)
(declare-fun x_Tuple64 ((FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3) @a4) @a5)) @a3)
(declare-fun x_Tuple52 ((FAppTy (FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3) @a4)) @a1)
(declare-fun null ((List @a0)) Bool)
(declare-fun papp2 ((Pred @a0 @a1) @a2 @a3) Bool)
(declare-fun x_Tuple62 ((FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3) @a4) @a5)) @a1)
(declare-fun fromJust ((FAppTy Data.Maybe.Maybe @a0)) @a0)
(declare-fun x_Tuple53 ((FAppTy (FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3) @a4)) @a2)
(declare-fun x_Tuple71 ((FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3) @a4) @a5) @a6)) @a0)
(declare-fun x_Tuple74 ((FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3) @a4) @a5) @a6)) @a3)
(declare-fun len ((List @a0)) Int)
(declare-fun x_Tuple22 ((FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1)) @a1)
(declare-fun x_Tuple66 ((FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3) @a4) @a5)) @a5)
(declare-fun x_Tuple44 ((FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3)) @a3)
(declare-fun xListSelector ((List @a0)) @a0)
(declare-fun x_Tuple72 ((FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3) @a4) @a5) @a6)) @a1)
(declare-fun isJust ((FAppTy Data.Maybe.Maybe @a0)) Bool)
(declare-fun Prop (GHC.Types.Bool) Bool)
(declare-fun x_Tuple31 ((FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2)) @a0)
(declare-fun x_Tuple75 ((FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3) @a4) @a5) @a6)) @a4)
(declare-fun papp1 ((Pred @a0) @a0) Bool)
(declare-fun x_Tuple61 ((FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3) @a4) @a5)) @a0)
(declare-fun x_Tuple43 ((FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3)) @a2)
(declare-fun x_Tuple51 ((FAppTy (FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3) @a4)) @a0)
(declare-fun x_Tuple73 ((FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3) @a4) @a5) @a6)) @a2)
(declare-fun x_Tuple54 ((FAppTy (FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3) @a4)) @a3)
(declare-fun cmp (GHC.Types.Ordering) GHC.Types.Ordering)
(declare-fun x_Tuple32 ((FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2)) @a1)
(declare-fun x_Tuple76 ((FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3) @a4) @a5) @a6)) @a5)
(declare-fun snd ((FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1)) @a1)
(declare-fun fst ((FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1)) @a0)
(declare-fun x_Tuple42 ((FAppTy (FAppTy (FAppTy (FAppTy Obj fix$35$$35$40$35$$35$41$35$ @a0) @a1) @a2) @a3)) @a1)


; Qualifiers
(qualif IsEmp ((v GHC.Types.Bool)(xs (List @a0))) (= (Prop v) (> (len xs) 0)))
(qualif IsEmp ((v GHC.Types.Bool)(xs (List @a0))) (= (Prop v) (= (len xs) 0)))
(qualif ListZ ((v (List @a0))) (= (len v) 0))
(qualif ListZ ((v (List @a0))) (>= (len v) 0))
(qualif ListZ ((v (List @a0))) (> (len v) 0))
(qualif CmpLen ((v (List @a1))(xs (List @a0))) (= (len v) (len xs)))
(qualif CmpLen ((v (List @a1))(xs (List @a0))) (>= (len v) (len xs)))
(qualif CmpLen ((v (List @a1))(xs (List @a0))) (> (len v) (len xs)))
(qualif CmpLen ((v (List @a1))(xs (List @a0))) (<= (len v) (len xs)))
(qualif CmpLen ((v (List @a1))(xs (List @a0))) (< (len v) (len xs)))
(qualif EqLen ((v Int)(xs (List @a0))) (= v (len xs)))
(qualif LenEq ((v (List @a0))(x Int)) (= x (len v)))
(qualif LenDiff ((v (List @a0))(x Int)) (= (len v) (+ x 1)))
(qualif LenDiff ((v (List @a0))(x Int)) (= (len v) (- x 1)))
(qualif LenAcc ((v Int)(xs (List @a0))(n Int)) (= v (+ (len xs) n)))
(qualif Bot ((v @a0)) (= 0 1))
(qualif Bot ((v @a0)) (= 0 1))
(qualif Bot ((v Bool)) (= 0 1))
(qualif Bot ((v Int)) (= 0 1))
(qualif CmpZ ((v @a0)) (< v 0))
(qualif CmpZ ((v @a0)) (<= v 0))
(qualif CmpZ ((v @a0)) (> v 0))
(qualif CmpZ ((v @a0)) (>= v 0))
(qualif CmpZ ((v @a0)) (= v 0))
(qualif CmpZ ((v @a0)) (not (= v 0)))
(qualif Cmp ((v @a0)(x @a0)) (< v x))
(qualif Cmp ((v @a0)(x @a0)) (<= v x))
(qualif Cmp ((v @a0)(x @a0)) (> v x))
(qualif Cmp ((v @a0)(x @a0)) (>= v x))
(qualif Cmp ((v @a0)(x @a0)) (= v x))
(qualif Cmp ((v @a0)(x @a0)) (not (= v x)))
(qualif One ((v Int)) (= v 1))
(qualif True ((v Bool)) v)
(qualif False ((v Bool)) (not v))
(qualif True1 ((v GHC.Types.Bool)) (Prop v))
(qualif False1 ((v GHC.Types.Bool)) (not (Prop v)))
(qualif Papp ((v @a0)(p (Pred @a0))) (papp1 p v))
(qualif Papp2 ((v @a1)(x @a0)(p (Pred @a1 @a0))) (papp2 p v x))
(qualif Papp3 ((v @a2)(x @a0)(y @a1)(p (Pred @a2 @a0 @a1))) (papp3 p v x y))
(qualif Papp4 ((v @a2)(x @a0)(y @a1)(z @a3)(p (Pred @a2 @a0 @a1 @a3))) (papp4 p v x y z))
(qualif Fst ((v @a1)(fix##126#Y @a0)) (= v (fst fix##126#Y)))
(qualif Snd ((v @a1)(fix##126#Y @a0)) (= v (snd fix##126#Y)))


; Well-formedness constraints
(wf $k_235 ((fix (FAppTy GHC.Classes.Ord Int))(GHC.Types.LT GHC.Types.Ordering)(fix (FAppTy GHC.Num.Num Int))(GHC.Types.EQ GHC.Types.Ordering)(a_a164 unknown [given FNum])(fix (FAppTy GHC.Num.Num Obj a_a164))(VV Obj a_a164)(GHC.Types.GT GHC.Types.Ordering)(fix (FAppTy GHC.Classes.Ord Obj a_a164))))
(wf $k_273 ((GHC.Types.LT GHC.Types.Ordering)(VV Int)(fix (FAppTy GHC.Num.Num Int))(fix (FAppTy GHC.Classes.Ord Int))(GHC.Types.GT GHC.Types.Ordering)(GHC.Types.EQ GHC.Types.Ordering)))


; Horn constraints
(constraint (forall ((GHC.Types.False#68 GHC.Types.Bool)(Language.Haskell.Liquid.Prelude.neq#rpy (Int Int) GHC.Types.Bool)(fix#GHC.Prim.#62##35##35#9m (Int Int) Int)(GHC.Types.I##6c (Int) Int)(Language.Haskell.Liquid.Prelude.leq#rpz (Int Int) GHC.Types.Bool)(GHC.Types.EQ#6U GHC.Types.Ordering)(GHC.Types.True#6u GHC.Types.Bool)(Language.Haskell.Liquid.Prelude.geq#rpA (Int Int) GHC.Types.Bool)(GHC.Types.LT#6S GHC.Types.Ordering)(lq_anf__d16C GHC.Types.Bool)(fix#GHC.Classes.#36#fOrdInt#35#rhx (FAppTy GHC.Classes.Ord Int))(Language.Haskell.Liquid.Prelude.lt#rpB (Int Int) GHC.Types.Bool)(GHC.Types.GT#6W GHC.Types.Ordering)(lq_anf__d16C GHC.Types.Bool)(v2 Int)(fix#GHC.Num.#36#fNumInt#35#rhy (FAppTy GHC.Num.Num Int))(Language.Haskell.Liquid.Prelude.gt#rpC (Int Int) GHC.Types.Bool)(Language.Haskell.Liquid.Prelude.liquidAssertB#rpD (GHC.Types.Bool) GHC.Types.Bool)(Language.Haskell.Liquid.Prelude.liquidAssertB#rpD (GHC.Types.Bool) GHC.Types.Bool)(Language.Haskell.Liquid.Prelude.choose#rpK (Int) Int)(Language.Haskell.Liquid.Prelude.isEven#rpL (Int) GHC.Types.Bool)(GHC.Types.EQ#6U GHC.Types.Ordering)(Language.Haskell.Liquid.Prelude.isOdd#rpM (Int) GHC.Types.Bool)(VV#346 Int)(GHC.Types.LT#6S GHC.Types.Ordering)(GHC.Integer.Type.smallInteger#0Z (Int) Int)(GHC.Types.GT#6W GHC.Types.Ordering)(GHC.Types.I##6c (Int) Int)(GHC.Types.True#6u GHC.Types.Bool)(fix#GHC.Prim.#43##35##35#98 (Int Int) Int)(GHC.Types.False#68 GHC.Types.Bool)(fix#GHC.Prim.#45##35##35#99 (Int Int) Int)(Language.Haskell.Liquid.Prelude.plus#rou (Int Int) Int)(fix#GHC.Prim.#61##61##35##35#9o (Int Int) Int)(Test0.x#r12i Int)(Language.Haskell.Liquid.Prelude.minus#rpv (Int Int) Int)(fix#GHC.Prim.#62##61##35##35#9n (Int Int) Int)(lq_anf__d16A Int)(Language.Haskell.Liquid.Prelude.times#rpw (Int Int) Int)(fix#GHC.Prim.#60##61##35##35#9r (Int Int) Int)(lq_anf__d16B GHC.Types.Bool)(Language.Haskell.Liquid.Prelude.eq#rpx (Int Int) GHC.Types.Bool)(fix#GHC.Prim.#60##35##35#9q (Int Int) Int)(lq_anf__d16C GHC.Types.Bool)) (=> (and True (and True (and True (and True (and True (and (= (apply cmp VV#220) GHC.Types.EQ#6U) (and True (and True (and (= (apply cmp VV#222) GHC.Types.LT#6S) (and (and (= (apply Prop lq_tmp_x321) (> Test0.x#r12i lq_anf__d16A)) (= lq_tmp_x321 lq_anf__d16B)) (and True (and True (and (= (apply cmp VV#223) GHC.Types.GT#6W) (and (and (= (apply Prop lq_tmp_x321) (> Test0.x#r12i lq_anf__d16A)) (and (= lq_tmp_x321 lq_anf__d16B) (and (apply Prop lq_tmp_x321) (apply Prop lq_tmp_x321)))) (and (and ($k_273 GHC.Types.LT#6S v2 fix#GHC.Num.#36#fNumInt#35#rhy fix#GHC.Classes.#36#fOrdInt#35#rhx GHC.Types.GT#6W GHC.Types.EQ#6U) (= v2 Test0.x#r12i)) (and True (and True (and True (and True (and True (and True (and True (and True (and (and ($k_273 GHC.Types.LT#6S VV#346 fix#GHC.Num.#36#fNumInt#35#rhy fix#GHC.Classes.#36#fOrdInt#35#rhx GHC.Types.GT#6W GHC.Types.EQ#6U) (= VV#346 Test0.x#r12i)) (and True (and True (and True (and True (and (apply Prop GHC.Types.True#6u) (and True (and (not (apply Prop GHC.Types.False#68)) (and True (and True (and True (and ($k_273 GHC.Types.LT#6S VV#272 fix#GHC.Num.#36#fNumInt#35#rhy fix#GHC.Classes.#36#fOrdInt#35#rhx GHC.Types.GT#6W GHC.Types.EQ#6U) (and True (and True (and (= lq_tmp_x291 0) (and True (and True (and (= (apply Prop lq_tmp_x297) (> Test0.x#r12i lq_anf__d16A)) (and True (and True (and (= (apply Prop lq_tmp_x313) (> Test0.x#r12i lq_anf__d16A)) (= lq_tmp_x313 lq_anf__d16B))))))))))))))))))))))))))))))))))))))))))))) ($k_235 fix#GHC.Classes.#36#fOrdInt#35#rhx GHC.Types.LT#6S fix#GHC.Num.#36#fNumInt#35#rhy GHC.Types.EQ#6U fix#GHC.Num.#36#fNumInt#35#rhy v2 GHC.Types.GT#6W fix#GHC.Classes.#36#fOrdInt#35#rhx))))
(constraint (forall ((GHC.Types.False#68 GHC.Types.Bool)(Language.Haskell.Liquid.Prelude.neq#rpy (Int Int) GHC.Types.Bool)(fix#GHC.Prim.#62##35##35#9m (Int Int) Int)(GHC.Types.I##6c (Int) Int)(Language.Haskell.Liquid.Prelude.leq#rpz (Int Int) GHC.Types.Bool)(GHC.Types.EQ#6U GHC.Types.Ordering)(VV#361 Int)(GHC.Types.True#6u GHC.Types.Bool)(Language.Haskell.Liquid.Prelude.geq#rpA (Int Int) GHC.Types.Bool)(GHC.Types.LT#6S GHC.Types.Ordering)(fix#GHC.Classes.#36#fOrdInt#35#rhx (FAppTy GHC.Classes.Ord Int))(Language.Haskell.Liquid.Prelude.lt#rpB (Int Int) GHC.Types.Bool)(GHC.Types.GT#6W GHC.Types.Ordering)(fix#GHC.Num.#36#fNumInt#35#rhy (FAppTy GHC.Num.Num Int))(Language.Haskell.Liquid.Prelude.gt#rpC (Int Int) GHC.Types.Bool)(v6 Int)(Language.Haskell.Liquid.Prelude.liquidAssertB#rpD (GHC.Types.Bool) GHC.Types.Bool)(Language.Haskell.Liquid.Prelude.liquidAssertB#rpD (GHC.Types.Bool) GHC.Types.Bool)(Language.Haskell.Liquid.Prelude.choose#rpK (Int) Int)(Language.Haskell.Liquid.Prelude.isEven#rpL (Int) GHC.Types.Bool)(GHC.Types.EQ#6U GHC.Types.Ordering)(Language.Haskell.Liquid.Prelude.isOdd#rpM (Int) GHC.Types.Bool)(GHC.Types.LT#6S GHC.Types.Ordering)(GHC.Integer.Type.smallInteger#0Z (Int) Int)(GHC.Types.GT#6W GHC.Types.Ordering)(GHC.Types.I##6c (Int) Int)(GHC.Types.True#6u GHC.Types.Bool)(fix#GHC.Prim.#43##35##35#98 (Int Int) Int)(GHC.Types.False#68 GHC.Types.Bool)(fix#GHC.Prim.#45##35##35#99 (Int Int) Int)(lq_anf__d16z Int)(Language.Haskell.Liquid.Prelude.plus#rou (Int Int) Int)(fix#GHC.Prim.#61##61##35##35#9o (Int Int) Int)(Language.Haskell.Liquid.Prelude.minus#rpv (Int Int) Int)(fix#GHC.Prim.#62##61##35##35#9n (Int Int) Int)(Language.Haskell.Liquid.Prelude.times#rpw (Int Int) Int)(fix#GHC.Prim.#60##61##35##35#9r (Int Int) Int)(Language.Haskell.Liquid.Prelude.eq#rpx (Int Int) GHC.Types.Bool)(fix#GHC.Prim.#60##35##35#9q (Int Int) Int)) (=> (and True (and True (and True (and True (and True (and (= (apply cmp VV#220) GHC.Types.EQ#6U) (and True (and True (and True (and (= (apply cmp VV#222) GHC.Types.LT#6S) (and True (and True (and (= (apply cmp VV#223) GHC.Types.GT#6W) (and True (and True (and True (and True (and True (and True (and True (and True (and True (and True (and True (and True (and True (and (apply Prop GHC.Types.True#6u) (and True (and (not (apply Prop GHC.Types.False#68)) (and True (and (= lq_tmp_x276 0) (and True (and True (and True (and True (and True (and True (and True True)))))))))))))))))))))))))))))))))))))) ($k_273 GHC.Types.LT#6S v6 fix#GHC.Num.#36#fNumInt#35#rhy fix#GHC.Classes.#36#fOrdInt#35#rhx GHC.Types.GT#6W GHC.Types.EQ#6U))))
(constraint (forall ((GHC.Types.False#68 GHC.Types.Bool)(Language.Haskell.Liquid.Prelude.neq#rpy (Int Int) GHC.Types.Bool)(fix#GHC.Prim.#62##35##35#9m (Int Int) Int)(GHC.Types.I##6c (Int) Int)(Language.Haskell.Liquid.Prelude.leq#rpz (Int Int) GHC.Types.Bool)(GHC.Types.EQ#6U GHC.Types.Ordering)(GHC.Types.True#6u GHC.Types.Bool)(Language.Haskell.Liquid.Prelude.geq#rpA (Int Int) GHC.Types.Bool)(GHC.Types.LT#6S GHC.Types.Ordering)(fix#GHC.Classes.#36#fOrdInt#35#rhx (FAppTy GHC.Classes.Ord Int))(Language.Haskell.Liquid.Prelude.lt#rpB (Int Int) GHC.Types.Bool)(GHC.Types.GT#6W GHC.Types.Ordering)(fix#GHC.Num.#36#fNumInt#35#rhy (FAppTy GHC.Num.Num Int))(Language.Haskell.Liquid.Prelude.gt#rpC (Int Int) GHC.Types.Bool)(fix##36#dOrd_a165 (FAppTy GHC.Classes.Ord Obj a_a164))(Language.Haskell.Liquid.Prelude.liquidAssertB#rpD (GHC.Types.Bool) GHC.Types.Bool)(Language.Haskell.Liquid.Prelude.liquidAssertB#rpD (GHC.Types.Bool) GHC.Types.Bool)(fix##36#dNum_a166 (FAppTy GHC.Num.Num Obj a_a164))(v8 GHC.Types.Bool)(Language.Haskell.Liquid.Prelude.choose#rpK (Int) Int)(Language.Haskell.Liquid.Prelude.isEven#rpL (Int) GHC.Types.Bool)(a_a164 unknown [given FNum])(GHC.Types.EQ#6U GHC.Types.Ordering)(Language.Haskell.Liquid.Prelude.isOdd#rpM (Int) GHC.Types.Bool)(gooberding#a15N Obj a_a164)(GHC.Types.LT#6S GHC.Types.Ordering)(GHC.Integer.Type.smallInteger#0Z (Int) Int)(lq_anf__d16w Int)(GHC.Types.GT#6W GHC.Types.Ordering)(GHC.Types.I##6c (Int) Int)(lq_anf__d16x Obj a_a164)(VV#373 GHC.Types.Bool)(GHC.Types.True#6u GHC.Types.Bool)(fix#GHC.Prim.#43##35##35#98 (Int Int) Int)(lq_anf__d16y GHC.Types.Bool)(GHC.Types.False#68 GHC.Types.Bool)(fix#GHC.Prim.#45##35##35#99 (Int Int) Int)(Language.Haskell.Liquid.Prelude.plus#rou (Int Int) Int)(fix#GHC.Prim.#61##61##35##35#9o (Int Int) Int)(Language.Haskell.Liquid.Prelude.minus#rpv (Int Int) Int)(fix#GHC.Prim.#62##61##35##35#9n (Int Int) Int)(Language.Haskell.Liquid.Prelude.times#rpw (Int Int) Int)(fix#GHC.Prim.#60##61##35##35#9r (Int Int) Int)(Language.Haskell.Liquid.Prelude.eq#rpx (Int Int) GHC.Types.Bool)(fix#GHC.Prim.#60##35##35#9q (Int Int) Int)) (=> (and True (and True (and True (and True (and True (and (= (apply cmp VV#220) GHC.Types.EQ#6U) (and True (and True (and (= (apply cmp VV#222) GHC.Types.LT#6S) (and True (and True (and (= (apply cmp VV#223) GHC.Types.GT#6W) (and True (and True (and True (and True (and True (and True (and (and (= (apply Prop v8) (>= gooberding#a15N lq_anf__d16x)) (= v8 lq_anf__d16y)) (and True (and True (and True (and True (and True (and ($k_235 fix#GHC.Classes.#36#fOrdInt#35#rhx GHC.Types.LT#6S fix#GHC.Num.#36#fNumInt#35#rhy GHC.Types.EQ#6U fix##36#dNum_a166 VV#234 GHC.Types.GT#6W fix##36#dOrd_a165) (and True (and True (and (= lq_tmp_x241 0) (and True (and True (and (= VV lq_anf__d16w) (and (and (= (apply Prop VV#373) (>= gooberding#a15N lq_anf__d16x)) (= VV#373 lq_anf__d16y)) (and (apply Prop GHC.Types.True#6u) (and True (and (= (apply Prop lq_tmp_x254) (>= gooberding#a15N lq_anf__d16x)) (and (not (apply Prop GHC.Types.False#68)) (and True (and True (and True (and True (and True (and True (and True (and True True)))))))))))))))))))))))))))))))))))))))))))) (apply Prop v8))))
