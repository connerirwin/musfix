
Preparing to find greatest fixpoint...

Inputs
--------
Reading from file test/./sample/gfp00.smt2
Qualifier "Pos" [Var IntS "v"] (Binary Le (IntLit 0) (Var IntS "v"))
Qualifier "Neg" [Var IntS "v"] (Binary Le (Var IntS "v") (IntLit 0))
Qualifier "NeqZ" [Var IntS "v"] (Unary Not (Binary Eq (Var IntS "v") (IntLit 0)))
Qualifier "False" [] (Binary Eq (IntLit 66) (IntLit 77))
WFConstraint "$k0" [Var IntS "v0"]
HornConstraint [Var IntS "v1"] (Binary Implies (Unknown (fromList [("v0",Var IntS "v1")]) "$k0") (Binary Lt (IntLit 0) (Binary Plus (Var IntS "v1") (IntLit 1))))
HornConstraint [Var IntS "v2"] (Binary Implies (Binary Eq (Var IntS "v2") (IntLit 10)) (Unknown (fromList [("v0",Var IntS "v2")]) "$k0"))

QMAP
--------
fromList [("$k0",QSpace {_qualifiers = [Binary Le (IntLit 0) (Var IntS "v0"),Binary Le (Var IntS "v0") (IntLit 0),Unary Not (Binary Eq (Var IntS "v0") (IntLit 0)),Binary Eq (IntLit 66) (IntLit 77)], _maxCount = 4})]

Candidates
--------
[Candidate {solution = fromList [("$k0",fromList [Binary Le (IntLit 0) (Var IntS "v0")])], validConstraints = fromList [Binary Implies (Unknown (fromList [("v0",Var IntS "v1")]) "$k0") (Binary Lt (IntLit 0) (Binary Plus (Var IntS "v1") (IntLit 1))),Binary Implies (Binary Eq (Var IntS "v2") (IntLit 10)) (Unknown (fromList [("v0",Var IntS "v2")]) "$k0")], invalidConstraints = fromList [], label = "0"}]


Final candidates: 
0: [$k0 -> {[36m0[0m [37m<=[0m v0}] (2 0)

