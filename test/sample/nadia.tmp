
Preparing to find greatest fixpoint...

Inputs
--------
Reading from file test/./sample/nadia.smt2
SortDecl "List" 1
UninterpFunction "len" [DataS "List" [VarS "0"]] IntS
UninterpFunction "elems" [DataS "List" [VarS "0"]] (SetS (VarS "0"))
Qualifier "LenZ" [Var (DataS "List" [VarS "0"]) "x"] (Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "x"]) (IntLit 0))
Qualifier "Empty" [Var (DataS "List" [VarS "0"]) "x"] (Binary Eq (Func (SetS (VarS "0")) "elems" [Var (DataS "List" [VarS "0"]) "x"]) (SetLit (VarS "0") []))
Qualifier "Plus1" [Var (DataS "List" [VarS "0"]) "x",Var (DataS "List" [VarS "0"]) "y"] (Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "x"]) (Binary Plus (IntLit 1) (Func IntS "len" [Var (DataS "List" [VarS "0"]) "y"])))
Qualifier "SumL" [Var (DataS "List" [VarS "0"]) "x",Var (DataS "List" [VarS "0"]) "y",Var (VarS "0") "z"] (Binary Eq (Func (SetS (VarS "_a")) "elems" [Var (DataS "List" [VarS "0"]) "x"]) (Binary Union (SetLit (VarS "_a") [Var (VarS "0") "z"]) (Func (SetS (VarS "_a")) "elems" [Var (DataS "List" [VarS "0"]) "y"])))
WFConstraint "$k0" [Var (DataS "List" [VarS "0"]) "nil",Var (DataS "List" [VarS "0"]) "v0",Var IntS "v1"]
HornConstraint [Var IntS "x",Var (DataS "List" [VarS "0"]) "nil",Var (DataS "List" [VarS "0"]) "x4",Var (DataS "List" [VarS "0"]) "_v"] (Binary Implies (Binary And (Binary And (Binary And (Binary And (Binary Eq (Func (SetS (VarS "0")) "elems" [Var (DataS "List" [VarS "0"]) "nil"]) (SetLit (VarS "0") [])) (Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "nil"]) (IntLit 0))) (Unknown (fromList [("nil",Var (DataS "List" [VarS "0"]) "nil"),("v0",Var (DataS "List" [VarS "0"]) "x4"),("v1",Var IntS "x")]) "$k0")) (Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "_v"]) (Binary Plus (IntLit 1) (Func IntS "len" [Var (DataS "List" [VarS "0"]) "x4"])))) (Binary Ge (Func IntS "len" [Var (DataS "List" [VarS "0"]) "x4"]) (IntLit 0))) (Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "_v"]) (IntLit 2)))
HornConstraint [Var IntS "x",Var (DataS "List" [VarS "0"]) "nil",Var (DataS "List" [VarS "0"]) "x4",Var (DataS "List" [VarS "0"]) "_v"] (Binary Implies (Binary And (Binary And (Binary And (Binary And (Binary Eq (Func (SetS (VarS "0")) "elems" [Var (DataS "List" [VarS "0"]) "nil"]) (SetLit (VarS "0") [])) (Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "nil"]) (IntLit 0))) (Unknown (fromList [("nil",Var (DataS "List" [VarS "0"]) "nil"),("v0",Var (DataS "List" [VarS "0"]) "x4"),("v1",Var IntS "x")]) "$k0")) (Binary Eq (Func (SetS (VarS "_a")) "elems" [Var (DataS "List" [VarS "0"]) "_v"]) (Binary Union (SetLit IntS [Var IntS "x"]) (Func (SetS (VarS "_a")) "elems" [Var (DataS "List" [VarS "0"]) "x4"])))) (Binary Ge (Func IntS "len" [Var (DataS "List" [VarS "0"]) "x4"]) (IntLit 0))) (Binary Eq (Func (SetS IntS) "elems" [Var (DataS "List" [VarS "0"]) "_v"]) (SetLit IntS [Var IntS "x"])))

QMAP
--------
fromList [("$k0",QSpace {_qualifiers = [Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "nil"]) (IntLit 0),Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "v0"]) (IntLit 0),Binary Eq (Func (SetS (VarS "0")) "elems" [Var (DataS "List" [VarS "0"]) "nil"]) (SetLit (VarS "0") []),Binary Eq (Func (SetS (VarS "0")) "elems" [Var (DataS "List" [VarS "0"]) "v0"]) (SetLit (VarS "0") []),Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "nil"]) (Binary Plus (IntLit 1) (Func IntS "len" [Var (DataS "List" [VarS "0"]) "v0"])),Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "v0"]) (Binary Plus (IntLit 1) (Func IntS "len" [Var (DataS "List" [VarS "0"]) "nil"])),Binary Eq (Func (SetS (VarS "_a")) "elems" [Var (DataS "List" [VarS "0"]) "nil"]) (Binary Union (SetLit (VarS "_a") [Var IntS "v1"]) (Func (SetS (VarS "_a")) "elems" [Var (DataS "List" [VarS "0"]) "v0"])),Binary Eq (Func (SetS (VarS "_a")) "elems" [Var (DataS "List" [VarS "0"]) "v0"]) (Binary Union (SetLit (VarS "_a") [Var IntS "v1"]) (Func (SetS (VarS "_a")) "elems" [Var (DataS "List" [VarS "0"]) "nil"]))], _maxCount = 8})]

Candidates
--------
[Candidate {solution = fromList [("$k0",fromList [Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "v0"]) (Binary Plus (IntLit 1) (Func IntS "len" [Var (DataS "List" [VarS "0"]) "nil"])),Binary Eq (Func (SetS (VarS "0")) "elems" [Var (DataS "List" [VarS "0"]) "v0"]) (SetLit (VarS "0") [])])], validConstraints = fromList [Binary Implies (Binary And (Binary And (Binary And (Binary And (Binary Eq (Func (SetS (VarS "0")) "elems" [Var (DataS "List" [VarS "0"]) "nil"]) (SetLit (VarS "0") [])) (Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "nil"]) (IntLit 0))) (Unknown (fromList [("nil",Var (DataS "List" [VarS "0"]) "nil"),("v0",Var (DataS "List" [VarS "0"]) "x4"),("v1",Var IntS "x")]) "$k0")) (Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "_v"]) (Binary Plus (IntLit 1) (Func IntS "len" [Var (DataS "List" [VarS "0"]) "x4"])))) (Binary Ge (Func IntS "len" [Var (DataS "List" [VarS "0"]) "x4"]) (IntLit 0))) (Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "_v"]) (IntLit 2)),Binary Implies (Binary And (Binary And (Binary And (Binary And (Binary Eq (Func (SetS (VarS "0")) "elems" [Var (DataS "List" [VarS "0"]) "nil"]) (SetLit (VarS "0") [])) (Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "nil"]) (IntLit 0))) (Unknown (fromList [("nil",Var (DataS "List" [VarS "0"]) "nil"),("v0",Var (DataS "List" [VarS "0"]) "x4"),("v1",Var IntS "x")]) "$k0")) (Binary Eq (Func (SetS (VarS "_a")) "elems" [Var (DataS "List" [VarS "0"]) "_v"]) (Binary Union (SetLit IntS [Var IntS "x"]) (Func (SetS (VarS "_a")) "elems" [Var (DataS "List" [VarS "0"]) "x4"])))) (Binary Ge (Func IntS "len" [Var (DataS "List" [VarS "0"]) "x4"]) (IntLit 0))) (Binary Eq (Func (SetS IntS) "elems" [Var (DataS "List" [VarS "0"]) "_v"]) (SetLit IntS [Var IntS "x"]))], invalidConstraints = fromList [], label = "0.0"},Candidate {solution = fromList [("$k0",fromList [Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "v0"]) (Binary Plus (IntLit 1) (Func IntS "len" [Var (DataS "List" [VarS "0"]) "nil"])),Binary Eq (Func (SetS (VarS "_a")) "elems" [Var (DataS "List" [VarS "0"]) "v0"]) (Binary Union (SetLit (VarS "_a") [Var IntS "v1"]) (Func (SetS (VarS "_a")) "elems" [Var (DataS "List" [VarS "0"]) "nil"]))])], validConstraints = fromList [Binary Implies (Binary And (Binary And (Binary And (Binary And (Binary Eq (Func (SetS (VarS "0")) "elems" [Var (DataS "List" [VarS "0"]) "nil"]) (SetLit (VarS "0") [])) (Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "nil"]) (IntLit 0))) (Unknown (fromList [("nil",Var (DataS "List" [VarS "0"]) "nil"),("v0",Var (DataS "List" [VarS "0"]) "x4"),("v1",Var IntS "x")]) "$k0")) (Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "_v"]) (Binary Plus (IntLit 1) (Func IntS "len" [Var (DataS "List" [VarS "0"]) "x4"])))) (Binary Ge (Func IntS "len" [Var (DataS "List" [VarS "0"]) "x4"]) (IntLit 0))) (Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "_v"]) (IntLit 2)),Binary Implies (Binary And (Binary And (Binary And (Binary And (Binary Eq (Func (SetS (VarS "0")) "elems" [Var (DataS "List" [VarS "0"]) "nil"]) (SetLit (VarS "0") [])) (Binary Eq (Func IntS "len" [Var (DataS "List" [VarS "0"]) "nil"]) (IntLit 0))) (Unknown (fromList [("nil",Var (DataS "List" [VarS "0"]) "nil"),("v0",Var (DataS "List" [VarS "0"]) "x4"),("v1",Var IntS "x")]) "$k0")) (Binary Eq (Func (SetS (VarS "_a")) "elems" [Var (DataS "List" [VarS "0"]) "_v"]) (Binary Union (SetLit IntS [Var IntS "x"]) (Func (SetS (VarS "_a")) "elems" [Var (DataS "List" [VarS "0"]) "x4"])))) (Binary Ge (Func IntS "len" [Var (DataS "List" [VarS "0"]) "x4"]) (IntLit 0))) (Binary Eq (Func (SetS IntS) "elems" [Var (DataS "List" [VarS "0"]) "_v"]) (SetLit IntS [Var IntS "x"]))], invalidConstraints = fromList [], label = "0.1"}]


Final candidates: 
0.0: [$k0 -> {len v0 [37m==[0m [36m1[0m [37m+[0m len nil, elems v0 [37m==[0m [37m[[0m[37m][0m}] (2 0)
0.1: [$k0 -> {len v0 [37m==[0m [36m1[0m [37m+[0m len nil, elems v0 [37m==[0m [37m[[0mv1[37m][0m [37m+[0m elems nil}] (2 0)

