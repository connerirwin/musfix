; Sorts
(declare-sort GHC.Enum.Bounded 1)
(declare-sort List 1)
(declare-sort GHC.IO.Exception.IOErrorType 0)
(declare-sort Tuple3 3)
(declare-sort Tuple2 2)
(declare-sort Tuple0 0)
(declare-sort GHC.Base.Maybe 1)
(declare-sort GHC.Integer.Type.BigNat 0)
(declare-sort Pred1 1)
(declare-sort Pred6 6)
(declare-sort Pred7 7)
(declare-sort Pred2 2)
(declare-sort Pred4 4)
(declare-sort Pred3 3)
(declare-sort Pred5 5)
(declare-sort Obj_a##a1YN 0)
(declare-sort GHC.IO.Handle.Types.Handle 0)
(declare-sort GHC.Real.Fractional 1)
(declare-sort GHC.Real.Ratio 1)
(declare-sort GHC.IO.Exception.IOException 0)
(declare-sort GHC.Prim.ByteArray# 0)
(declare-sort GHC.Classes.IP 2)
(declare-sort Char 0)
(declare-sort GHC.Real.Integral 1)
(declare-sort Foreign.C.Types.CInt 0)
(declare-sort Data.Either.Either 2)
(declare-sort GHC.Stack.Types.CallStack 0)
(declare-sort GHC.Types.TrName 0)
(declare-sort GHC.Types.Ordering 0)

; Constants
(declare-const lit$__SLASH__media__SLASH__psf__SLASH__Workspace__SLASH__tests__SLASH__Last.hs (List Char))
(declare-const _GHC.Types.LT GHC.Types.Ordering)
(declare-const _GHC.Types.False Bool)
(declare-const lit$error (List Char))
(declare-const _GHC.Tuple.__LPAREN____RPAREN__ Tuple0)
(declare-const lit$empty (List Char))
(declare-const lit$Main (List Char))
(declare-const _GHC.Stack.Types.EmptyCallStack GHC.Stack.Types.CallStack)
(declare-const _GHC.Stack.Types.emptyCallStack GHC.Stack.Types.CallStack)
(declare-const lit$main (List Char))
(declare-const _GHC.Types.True Bool)
(declare-const _GHC.Types.[] (List @a0))
(declare-const _GHC.Base.Nothing (GHC.Base.Maybe @a0))
(declare-const _GHC.Types.GT GHC.Types.Ordering)
(declare-const _GHC.Types.EQ GHC.Types.Ordering)

(assert (distinct lit$__SLASH__media__SLASH__psf__SLASH__Workspace__SLASH__tests__SLASH__Last.hs lit$error lit$empty lit$Main lit$main))
(assert (distinct _GHC.Types.False _GHC.Types.True))
(assert (distinct _GHC.Types.LT _GHC.Types.GT _GHC.Types.EQ))

; Uninterpreted Functions
(declare-fun _GHC.Base.id (@a0) @a0)
(declare-fun _GHC.List.init ((List @a0)) (List @a0))
(declare-fun addrLen ((List Char)) Int)
(declare-fun papp5 ((Pred5 @a0 @a1 @a2 @a3 @a4) @a5 @a6 @a7 @a8 @a9) Bool)
(declare-fun _GHC.List.iterate (Int @a0) (List @a0))
(declare-fun x_Tuple21 ((Tuple2 @a0 @a1)) @a0)
(declare-fun _GHC.Classes.== (@a0 @a0) Bool)
(declare-fun _GHC.Types.C# (Char) Char)
(declare-fun _GHC.List.drop (Int (List @a0)) (List @a0))
(declare-fun _Data.Foldable.length ((@t0 @a0)) Int)
(declare-fun x_Tuple33 ((Tuple3 @a0 @a1 @a2)) @a2)
(declare-fun _GHC.List.replicate (Int @a0) (List @a0))
(declare-fun _GHC.List.zipWith (Int (List @a0) (List @a1)) (List @a2))
(declare-fun _GHC.Classes.>= (@a0 @a0) Bool)
(declare-fun _GHC.Num.fromInteger (Int) @a0)
(declare-fun papp3 ((Pred3 @a0 @a1 @a2) @a3 @a4 @a5) Bool)
(declare-fun _GHC.List.span (Int (List @a0)) (Tuple2 (List @a0) (List @a0)))
(declare-fun _GHC.Classes.> (@a0 @a0) Bool)
(declare-fun _GHC.List.scanr1 (Int (List @a0)) (List @a0))
(declare-fun _GHC.Types.__COLON__ (@a0 (List @a0)) (List @a0))
(declare-fun _GHC.List.scanl (Int @a0 (List @a1)) (List @a0))
(declare-fun _GHC.Tuple.__LPAREN____COMMA____COMMA____RPAREN__ (@a0 @a1 @a2) (Tuple3 @a0 @a1 @a2))
(declare-fun papp4 ((Pred4 @a0 @a1 @a2 @a3) @a4 @a5 @a6 @a7) Bool)
(declare-fun _mk_GHC.Types.Module (GHC.Types.TrName GHC.Types.TrName) GHC.Types.Module)
(declare-fun _GHC.List.zip ((List @a0) (List @a1)) (List (Tuple2 @a0 @a1)))
(declare-fun _GHC.Types.I# (Int) Int)
(declare-fun _mk_GHC.Stack.Types.SrcLoc ((List Char) (List Char) (List Char) Int Int Int Int) GHC.Stack.Types.SrcLoc)
(declare-fun _GHC.CString.unpackCString# ((List Char)) (List Char))
(declare-fun _GHC.List.dropWhile (Int (List @a0)) (List @a0))
(declare-fun _GHC.Real.C__COLON__Fractional (Int Int Int) (GHC.Real.Fractional @a0))
(declare-fun autolen (@a0) Int)
(declare-fun _GHC.Integer.Type.$WJn# (GHC.Integer.Type.BigNat) Int)
(declare-fun _GHC.Real.^ (@a0 @a1) @a0)
(declare-fun head ((List @a0)) @a0)
(declare-fun _GHC.Integer.Type.Jn# (GHC.Prim.ByteArray#) Int)
(declare-fun _GHC.Classes.compare (@a0 @a0) GHC.Types.Ordering)
(declare-fun papp2 ((Pred2 @a0 @a1) @a2 @a3) Bool)
(declare-fun _GHC.List.reverse ((List @a0)) (List @a0))
(declare-fun _GHC.Integer.Type.$WJp# (GHC.Integer.Type.BigNat) Int)
(declare-fun _GHC.List.filter (Int (List @a0)) (List @a0))
(declare-fun fromJust ((GHC.Base.Maybe @a0)) @a0)
(declare-fun _GHC.List.cycle ((List @a0)) (List @a0))
(declare-fun _GHC.List.!! ((List @a0) Int) @a0)
(declare-fun _GHC.List.tail ((List @a0)) (List @a0))
(declare-fun papp7 ((Pred7 @a0 @a1 @a2 @a3 @a4 @a5 @a6) @a7 @a8 @a9 @a10 @a11 @a12 @a13) Bool)
(declare-fun _GHC.Classes.__SLASH__= (@a0 @a0) Bool)
(declare-fun _GHC.List.break (Int (List @a0)) (Tuple2 (List @a0) (List @a0)))
(declare-fun _GHC.List.splitAt (Int (List @a0)) (Tuple2 (List @a0) (List @a0)))
(declare-fun _GHC.Base.++ ((List @a0) (List @a0)) (List @a0))
(declare-fun _GHC.Real.__COLON__% (@a0 @a0) (GHC.Real.Ratio @a0))
(declare-fun _GHC.Tuple.__LPAREN____COMMA____RPAREN__ (@a0 @a1) (Tuple2 @a0 @a1))
(declare-fun _GHC.Classes.&& (Bool Bool) Bool)
(declare-fun _GHC.Classes.C__COLON__IP (@a1) (GHC.Classes.IP @a0 @a1))
(declare-fun _GHC.Classes.__PIPE____PIPE__ (Bool Bool) Bool)
(declare-fun _Data.Either.Left (@a0) (Data.Either.Either @a0 @a1))
(declare-fun _GHC.Integer.Type.S# (Int) Int)
(declare-fun _GHC.List.scanl1 (Int (List @a0)) (List @a0))
(declare-fun _Data.Either.Right (@a1) (Data.Either.Either @a0 @a1))
(declare-fun _GHC.Num.- (@a0 @a0) @a0)
(declare-fun len ((@t0 @a1)) Int)
(declare-fun papp6 ((Pred6 @a0 @a1 @a2 @a3 @a4 @a5) @a6 @a7 @a8 @a9 @a10 @a11) Bool)
(declare-fun _GHC.Base.. (Int Int @a2) @a1)
(declare-fun x_Tuple22 ((Tuple2 @a0 @a1)) @a1)
(declare-fun strLen ((List Char)) Int)
(declare-fun _GHC.Real.$W__COLON__% (@a0 @a0) (GHC.Real.Ratio @a0))
(declare-fun isJust ((GHC.Base.Maybe @a0)) Bool)
(declare-fun _GHC.List.takeWhile (Int (List @a0)) (List @a0))
(declare-fun _GHC.Types.TrNameD ((List Char)) GHC.Types.TrName)
(declare-fun _GHC.Stack.Types.pushCallStack ((Tuple2 (List Char) GHC.Stack.Types.SrcLoc) GHC.Stack.Types.CallStack) GHC.Stack.Types.CallStack)
(declare-fun x_Tuple31 ((Tuple3 @a0 @a1 @a2)) @a0)
(declare-fun _GHC.Integer.Type.Jp# (GHC.Prim.ByteArray#) Int)
(declare-fun _GHC.IO.Exception.IOError ((GHC.Base.Maybe GHC.IO.Handle.Types.Handle) GHC.IO.Exception.IOErrorType (List Char) (List Char) (GHC.Base.Maybe Foreign.C.Types.CInt) (GHC.Base.Maybe (List Char))) GHC.IO.Exception.IOException)
(declare-fun _GHC.List.take (Int (List @a0)) (List @a0))
(declare-fun _GHC.Stack.Types.PushCallStack ((List Char) GHC.Stack.Types.SrcLoc GHC.Stack.Types.CallStack) GHC.Stack.Types.CallStack)
(declare-fun _GHC.Classes.<= (@a0 @a0) Bool)
(declare-fun _GHC.Types.TrNameS ((List Char)) GHC.Types.TrName)
(declare-fun _GHC.Enum.C__COLON__Bounded (@a0 @a0) (GHC.Enum.Bounded @a0))
(declare-fun _GHC.Base.map (Int (List @a0)) (List @a1))
(declare-fun _GHC.Base.$ (Int @a1) @a2)
(declare-fun papp1 ((Pred1 @a0) @a1) Bool)
(declare-fun _GHC.Classes.max (@a0 @a0) @a0)
(declare-fun _GHC.Classes.< (@a0 @a0) Bool)
(declare-fun tail ((List @a0)) (List @a0))
(declare-fun _GHC.Stack.Types.FreezeCallStack (GHC.Stack.Types.CallStack) GHC.Stack.Types.CallStack)
(declare-fun _GHC.Num.* (@a0 @a0) @a0)
(declare-fun _GHC.List.scanr (Int @a1 (List @a0)) (List @a1))
(declare-fun _GHC.Num.negate (@a0) @a0)
(declare-fun _GHC.Real.fromIntegral (@a0) @a1)
(declare-fun _GHC.Classes.min (@a0 @a0) @a0)
(declare-fun _GHC.List.head ((List @a0)) @a0)
(declare-fun x_Tuple32 ((Tuple3 @a0 @a1 @a2)) @a1)
(declare-fun _GHC.List.repeat (@a0) (List @a0))
(declare-fun _GHC.Classes.not (Bool) Bool)
(declare-fun _GHC.Num.+ (@a0 @a0) @a0)
(declare-fun _Data.Tuple.fst ((Tuple2 @a0 @a1)) @a0)
(declare-fun _GHC.Real.C__COLON__Integral (Int Int Int Int Int Int Int) (GHC.Real.Integral @a0))
(declare-fun _GHC.Base.Just (@a0) (GHC.Base.Maybe @a0))
(declare-fun _GHC.Err.error ((List Char)) @a1)
(declare-fun snd ((Tuple2 @a0 @a1)) @a1)
(declare-fun fst ((Tuple2 @a0 @a1)) @a0)
(declare-fun _Data.Tuple.snd ((Tuple2 @a0 @a1)) @a1)

; Qualifiers
(qualif Bot ((v @a0)) (= 0 1))
(qualif Bot ((v @a0)) (= 0 1))
(qualif Bot ((v @a0)) (= 0 1))
(qualif Bot ((v Bool)) (= 0 1))
(qualif Bot ((v Int)) (= 0 1))
(qualif CmpZ ((v @a0)) (< v 0))
(qualif CmpZ ((v @a0)) (<= v 0))
(qualif CmpZ ((v @a0)) (> v 0))
(qualif CmpZ ((v @a0)) (>= v 0))
(qualif CmpZ ((v @a0)) (= v 0))
(qualif CmpZ ((v @a0)) (not (= v 0)))
(qualif Cmp ((v @a0)(x @a0)) (< v x))
(qualif Cmp ((v @a0)(x @a0)) (<= v x))
(qualif Cmp ((v @a0)(x @a0)) (> v x))
(qualif Cmp ((v @a0)(x @a0)) (>= v x))
(qualif Cmp ((v @a0)(x @a0)) (= v x))
(qualif Cmp ((v @a0)(x @a0)) (not (= v x)))
(qualif One ((v Int)) (= v 1))
(qualif True1 ((v Bool)) v)
(qualif False1 ((v Bool)) (not v))
(qualif Papp ((v @a0)(p (Pred1 @a0))) (papp1 p v))
(qualif Papp2 ((v @a0)(x @a1)(p (Pred2 @a0 @a1))) (papp2 p v x))
(qualif Papp3 ((v @a0)(x @a1)(y @a2)(p (Pred3 @a0 @a1 @a2))) (papp3 p v x y))
(qualif Fst ((__v @a0)(__y @a1)) (= __v (fst __y)))
(qualif Snd ((__v @a0)(__y @a1)) (= __v (snd __y)))
(qualif IsEmp ((v Bool)(xs (List @a0))) (= v (> (len xs) 0)))
(qualif IsEmp ((v Bool)(xs (List @a0))) (= v (= (len xs) 0)))
(qualif ListZ ((v (List @a0))) (= (len v) 0))
(qualif ListZ ((v (List @a0))) (>= (len v) 0))
(qualif ListZ ((v (List @a0))) (> (len v) 0))
(qualif CmpLen ((v (List @a0))(xs (List @a1))) (= (len v) (len xs)))
(qualif CmpLen ((v (List @a0))(xs (List @a1))) (>= (len v) (len xs)))
(qualif CmpLen ((v (List @a0))(xs (List @a1))) (> (len v) (len xs)))
(qualif CmpLen ((v (List @a0))(xs (List @a1))) (<= (len v) (len xs)))
(qualif CmpLen ((v (List @a0))(xs (List @a1))) (< (len v) (len xs)))
(qualif EqLen ((v Int)(xs (List @a0))) (= v (len xs)))
(qualif LenEq ((v (List @a0))(x Int)) (= x (len v)))
(qualif LenDiff ((v (List @a0))(x Int)) (= (len v) (+ x 1)))
(qualif LenDiff ((v (List @a0))(x Int)) (= (len v) (- x 1)))
(qualif LenAcc ((v Int)(xs (List @a0))(n Int)) (= v (+ (len xs) n)))
(qualif Auto ((v (List @a0))) (< 0 (len v)))
(qualif Auto ((v (List Char))) False)
(qualif Auto ((v (List Char))(x (List Char))) (= v x))
(qualif Auto ((v (List Char))(x (List Char))) (= (len v) (strLen x)))
(qualif Auto ((v Int)(x Int)) (= v x))
(qualif Auto ((_VV @a0)(p2 (Pred2 @a0 @a1))(x_Tuple21##GHC.Tuple.__LPAREN____COMMA____RPAREN__ @a1)) (papp2 p2 _VV x_Tuple21##GHC.Tuple.__LPAREN____COMMA____RPAREN__))
(qualif Auto ((vv @a0)(x_Tuple21##GHC.Tuple.__LPAREN____COMMA____RPAREN__ @a0)) (= vv x_Tuple21##GHC.Tuple.__LPAREN____COMMA____RPAREN__))
(qualif Auto ((_VV (Tuple2 @a1 @a0))(x_Tuple22##GHC.Tuple.__LPAREN____COMMA____RPAREN__ @a0)) (= (x_Tuple22 _VV) x_Tuple22##GHC.Tuple.__LPAREN____COMMA____RPAREN__))
(qualif Auto ((_VV (Tuple2 @a1 @a0))(x_Tuple21##GHC.Tuple.__LPAREN____COMMA____RPAREN__ @a1)) (= (x_Tuple21 _VV) x_Tuple21##GHC.Tuple.__LPAREN____COMMA____RPAREN__))
(qualif Auto ((_VV (Tuple2 @a1 @a0))(x_Tuple22##GHC.Tuple.__LPAREN____COMMA____RPAREN__ @a0)) (= (snd _VV) x_Tuple22##GHC.Tuple.__LPAREN____COMMA____RPAREN__))
(qualif Auto ((_VV (Tuple2 @a1 @a0))(x_Tuple21##GHC.Tuple.__LPAREN____COMMA____RPAREN__ @a1)) (= (fst _VV) x_Tuple21##GHC.Tuple.__LPAREN____COMMA____RPAREN__))

; Well-formedness Constraints


;  Constraints
(constraint (forall ((ds_d2b6 (List Obj_a##a1YN))(lq_tmp$x##951 (List Obj_a##a1YN))(x##asf Obj_a##a1YN)(lq_tmp$x##929 (List Obj_a##a1YN))(lq_tmp$x##877 (List Obj_a##a1YN))(ds_d2aV (List Obj_a##a1YN))(lq_anf$##7205759403792802005##d2bz (List Obj_a##a1YN))(lq_tmp$x##1010 (List Obj_a##a1YN))(lq_anf$##7205759403792802004##d2by Obj_a##a1YN)(lq_tmp$x##988 (List Obj_a##a1YN))(_VV##F##2 (List Obj_a##a1YN))(lq_tmp$x##965 (List Obj_a##a1YN))) (=> (and (and (and (>= (len lq_tmp$x##965) 0) (= lq_tmp$x##965 ds_d2b6)) (>= (len lq_tmp$x##965) 0)) (and (and (and (>= (len _VV##F##2) 0) (= _VV##F##2 ds_d2b6)) (>= (len _VV##F##2) 0)) (and (and (and (and (>= (len lq_tmp$x##988) 0) (= lq_tmp$x##988 ds_d2b6)) (>= (len lq_tmp$x##988) 0)) (>= (len lq_tmp$x##988) 0)) (and (not _GHC.Types.False) (and (>= (len lq_tmp$x##1010) 0) (and (and (< 0 (len ds_d2aV)) (>= (len ds_d2aV) 0)) (and (and (and (and (and (and (>= (len lq_tmp$x##988) 0) (= lq_tmp$x##988 ds_d2b6)) (>= (len lq_tmp$x##988) 0)) (and (and (= (tail lq_tmp$x##988) lq_anf$##7205759403792802005##d2bz) (= (head lq_tmp$x##988) lq_anf$##7205759403792802004##d2by)) (= (len lq_tmp$x##988) (+ 1 (len lq_anf$##7205759403792802005##d2bz))))) (and (= lq_tmp$x##988 (_GHC.Types.__COLON__ lq_anf$##7205759403792802004##d2by lq_anf$##7205759403792802005##d2bz)) (and (and (= (tail lq_tmp$x##988) lq_anf$##7205759403792802005##d2bz) (= (head lq_tmp$x##988) lq_anf$##7205759403792802004##d2by)) (= (len lq_tmp$x##988) (+ 1 (len lq_anf$##7205759403792802005##d2bz)))))) (>= (len lq_tmp$x##988) 0)) (and (and (and (and (< 0 (len lq_tmp$x##877)) (>= (len lq_tmp$x##877) 0)) (= lq_tmp$x##877 ds_d2aV)) (>= (len lq_tmp$x##877) 0)) (and _GHC.Types.True (and (and (and (and (and (< 0 (len lq_tmp$x##929)) (>= (len lq_tmp$x##929) 0)) (= lq_tmp$x##929 ds_d2aV)) (>= (len lq_tmp$x##929) 0)) (>= (len lq_tmp$x##929) 0)) (and (>= (len lq_tmp$x##951) 0) (and (and (and (and (and (and (< 0 (len lq_tmp$x##929)) (>= (len lq_tmp$x##929) 0)) (= lq_tmp$x##929 ds_d2aV)) (>= (len lq_tmp$x##929) 0)) (and (and (= (tail lq_tmp$x##929) ds_d2b6) (= (head lq_tmp$x##929) x##asf)) (= (len lq_tmp$x##929) (+ 1 (len ds_d2b6))))) (and (= lq_tmp$x##929 (_GHC.Types.__COLON__ x##asf ds_d2b6)) (and (and (= (tail lq_tmp$x##929) ds_d2b6) (= (head lq_tmp$x##929) x##asf)) (= (len lq_tmp$x##929) (+ 1 (len ds_d2b6)))))) (>= (len lq_tmp$x##929) 0))))))))))))) (< 0 (len _VV##F##2)))))
(constraint (forall ((lq_anf$##7205759403792802002##d2bw (List Char))(lq_tmp$x##902 (List Char))(lq_anf$##7205759403792802001##d2bv (List Char))(lq_tmp$x##896 (List Char))(lq_tmp$x##883 (List Obj_a##a1YN))(lq_tmp$x##877 (List Obj_a##a1YN))(ds_d2aV (List Obj_a##a1YN))(_VV##F##4 (List Char))) (=> (and (and (and (and (and (= _VV##F##4 lq_anf$##7205759403792802001##d2bv) (= (len _VV##F##4) (strLen lq_anf$##7205759403792802001##d2bv))) (>= (len _VV##F##4) 0)) (= _VV##F##4 lq_anf$##7205759403792802002##d2bw)) (>= (len _VV##F##4) 0)) (and (not _GHC.Types.False) (and (and (< 0 (len ds_d2aV)) (>= (len ds_d2aV) 0)) (and (and (and (and (< 0 (len lq_tmp$x##877)) (>= (len lq_tmp$x##877) 0)) (= lq_tmp$x##877 ds_d2aV)) (>= (len lq_tmp$x##877) 0)) (and _GHC.Types.True (and (and (and (and (and (< 0 (len lq_tmp$x##883)) (>= (len lq_tmp$x##883) 0)) (= lq_tmp$x##883 ds_d2aV)) (>= (len lq_tmp$x##883) 0)) (>= (len lq_tmp$x##883) 0)) (and (and (and (and (and (and (and (< 0 (len lq_tmp$x##883)) (>= (len lq_tmp$x##883) 0)) (= lq_tmp$x##883 ds_d2aV)) (>= (len lq_tmp$x##883) 0)) (= (len lq_tmp$x##883) 0)) (and (= lq_tmp$x##883 _GHC.Types.[]) (= (len lq_tmp$x##883) 0))) (>= (len lq_tmp$x##883) 0)) (and (= lq_tmp$x##896 lit$empty) (and (and (and (= lq_tmp$x##902 lq_anf$##7205759403792802001##d2bv) (= (len lq_tmp$x##902) (strLen lq_anf$##7205759403792802001##d2bv))) (>= (len lq_tmp$x##902) 0)) True))))))))) False)))

